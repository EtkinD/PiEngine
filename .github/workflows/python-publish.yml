# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

name: Python Package

on:
  release:
    types: [published]
  push:
    branches: main
    paths-ignore:
      - 'docs/**'
      - 'samples/**'
      - '.gitignore'
      - '*.rst'
      - '*.md'
      - '.github/workflows/*.yml'
      # re-include current file to not be excluded
      - '!.github/workflows/python-publish.yml'

jobs:
  release-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04]
        python-version: [ "3.10" ]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools

      - name: Build distributions
        run: |
          python setup.py sdist
          python3 -m pip install dist/piengine-*.tar.gz

      # TODO: Add tests
      # - name: Run tests

      - name: Upload sdist
        if: matrix.os == 'ubuntu-20.04' && matrix.python-version == '3.10' # only upload once
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/*.tar.gz

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - release-build
    environment:
      name: pypi
      url: https://pypi.org/project/piengine/${{ github.event.release.name }}

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m pip install twine
          python -m twine upload dist/*.tar.gz
